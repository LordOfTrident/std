%include "core.ysl"

func get_element arr index
	param arr
	param index

	mul $index 2
	to index

	add $arr $index
	to arr
	peek16 $arr
endf

func set_element arr index value
	param arr
	param index
	param value

	mul $index 2
	to index

	add $arr $index
	to arr
	poke16 $arr $value
endf

func get_char str index
	param str
	param index

	add $str $index
	to str
	peek8 $str
endf

func set_char str index value
	param str
	param index
	param value

	add $str $index
	to str
	poke8 $str $value
endf

func puthex byte
	param byte
	local int temp
	local array 16 digits

	set_element &digits 0 !0
	set_element &digits 1 !1
	set_element &digits 2 !2
	set_element &digits 3 !3
	set_element &digits 4 !4
	set_element &digits 5 !5
	set_element &digits 6 !6
	set_element &digits 7 !7
	set_element &digits 8 !8
	set_element &digits 9 !9
	set_element &digits 10 !A
	set_element &digits 11 !B
	set_element &digits 12 !C
	set_element &digits 13 !D
	set_element &digits 14 !E
	set_element &digits 15 !F

	div $byte 16
	to temp
	get_element &digits $temp
	to temp
	putch $temp

	mod $byte 16
	to temp
	get_element &digits $temp
	to temp
	putch $temp
endf

func putstr str
	param str

	local int index
	local int ch
	set index 0
	get_char $str $index
	to ch

	while greater $ch 0
		putch $ch
		add $index 1
		to index
		get_char $str $index
		to ch
	endwhile
endf

func strcmp s1 s2
	param s1
	param s2

	local int index
	local int ch1
	local int ch2
	set index 0
	get_char $s1 $index
	to ch1
	get_char $s2 $index
	to ch2

	while greater $ch1 0
		if equals $ch1 $ch2
			# bla bla bla
		else
			return 0
		endif

		add $index 1
		to index
		get_char $s1 $index
		to ch1
		get_char $s2 $index
		to ch2
	endwhile

	return 1
endf

func readstr out
	param out

	local int input
	local int index

	while equals 1 1
		getch
		to input
		putch $input
		
		if equals $input 13
			putch 10
			return
		endif

		set_char $out $index $input
		add $index 1
		to index
	endwhile
endf

func max n1 n2
	param n1
	param n2

	if greater $n1 $n2
		return $n1
	else
		return $n2
	endif
endf

func min n1 n2
	param n1
	param n2

	if less $n1 $n2
		return $n1
	else
		return $n2
	endif
endf

func memcpy src dest n
	param src
	param dest
	param n

	local int i

 	for i $n
		local int byte
		peek8 $src
		to byte
		poke8 $dest $byte

		add $src 1
		to src
		add $dest 1
		to dest
	endfor
endf

func strlen str
	param str

	local int idx
	local int character

	get_char &str $idx
	to character

	while greater $character 0
		add $idx 1
		to idx
		get_char &str $idx
		to character
	endwhile

	add $idx 1
	to idx

	return $idx
endf

# made by @LordOfTrident
func putdec num
    param num

    if equals $num 0
        putch !0
        return
    endif

    local string digits "00000"
    local int address
    local int i
    set i 0

    set address &digits

    local int end
    set end 0

    local int j

    for i 5
        if equals $end 0
            local int off
            mod $num 10
            to off

            local int ch
            set ch !0

            add $ch $off
            to ch

            set_char &digits $i $ch

            if equals $num 0
                set end 1
                add $address $i
                to address
                add $address 1
                to address
            else
                div $num 10
                to num
            endif
        endif
    endfor

    putstr $address
endf
